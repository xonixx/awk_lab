# vim: syntax=bash
@options timing

@define FHTAGN_VERSION='v0.1.0'
@define FHTAGN_URL="https://github.com/xonixx/fhtagn/raw/$FHTAGN_VERSION/fhtagn.awk"
@define JSONTestSuite_REPO='https://github.com/nst/JSONTestSuite'
@define GOAWK_VERSION='1.24.0'
@define GOAWK="goawk$GOAWK_VERSION"
@define AWK='awk'

@goal soft_folder_created @private
@reached_if [[ -d "soft" ]]
  mkdir soft

@define FHTAGN="soft/fhtagn.awk"

@goal fhtagn_installed @private
@depends_on soft_folder_created
@reached_if [[ -x "$FHTAGN" ]]
  if command -v wget >/dev/null
  then
    wget "$FHTAGN_URL" -O"$FHTAGN"
  elif command -v curl >/dev/null
  then
    curl -L "$FHTAGN_URL" -o "$FHTAGN"
  else
    echo "can't dl fhtagn"
    exit 2
  fi
  chmod +x "$FHTAGN"

@goal soft_installed @private
@depends_on fhtagn_installed

@goal cleaned_soft @private
@reached_if [[ ! -d "soft" ]]
  rm -r "soft"

@goal cleaned @private
@depends_on cleaned_soft

@goal debug @private
  case "$AWK" in
    *mawk*) "$AWK" -W version 2>&1 | head -n 1
            ;;
         *) "$AWK" --version | head -n 1
            ;;
  esac
  bash --version| head -n 1

@goal prepared4tests @private
@depends_on fhtagn_installed debug

@lib
  run_tush() {
    local f="$1"

    if ./soft/fhtagn.awk "$f"
    then
      echo "TESTS PASSED : $f"
    else
      echo >&2 "!!! TESTS FAILED !!! : $f"
      exit 1
    fi
  }

@goal @glob *.tush @private
@depends_on prepared4tests
@use_lib
  run_tush "$ITEM"

@goal @glob *.tush.1 @private
@depends_on prepared4tests
@use_lib
  run_tush "$ITEM"

@goal @glob *.tush.sh @private
@depends_on prepared4tests
@use_lib
  . "$ITEM"
  run_tush "$FILE"

@goal tested
@doc run tests
@depends_on *.tush
@depends_on *.tush.sh

@goal default
@doc same as tested
@depends_on tested

@goal notrace @glob *.awk
  awk '$1 !~ /^trace\(/' "$ITEM"

#-------------------------------
@goal tested_awks
@doc 'tests with all awks'
@depends_on tested
@depends_on tested_bwk
@depends_on tested_mawk
@depends_on tested_mawk134
@depends_on tested_gawk51
@depends_on tested_goawk
#@depends_on tested_goawk_branch

@goal tested_bwk @private
@depends_on installed_bwk
  ./makesure -D AWK="$(pwd)/soft/bwk" tested

@goal tested_mawk134 @private
@depends_on installed_mawk134
  ./makesure -D AWK="$(pwd)/soft/mawk134" tested

@goal tested_gawk51 @private
@depends_on installed_gawk51
  ./makesure -D AWK="$(pwd)/soft/gawk51" tested
#  AWKLIBPATH="$(pwd)/soft/gawk51_libs" ./makesure -D AWK="$(pwd)/soft/gawk51" tested

@goal tested_goawk @private
@depends_on installed_goawk
  ./makesure -D AWK="$(pwd)/soft/$GOAWK" tested

@goal tested_goawk_branch @private
@depends_on installed_goawk_branch
  ./makesure -D AWK="$(pwd)/soft/$GOAWK_BRANCH_EXE" tested

@goal tested_mawk @private
  if [[ -x /usr/bin/mawk ]]
  then
    ./makesure -D AWK="/usr/bin/mawk" tested
  else
    echo "No default mawk... Skipped testing it."
  fi
#-------------------------------

@goal installed_awks
@doc installs all awks into ./soft
@depends_on installed_bwk
@depends_on installed_gawk51
@depends_on installed_mawk134
@depends_on installed_goawk

@goal installed_bwk @private
@reached_if [[ -f soft/bwk ]]
@depends_on soft_folder_created
  echo
  echo "Fetching BWK..."
  echo

  cd "soft"

  wget https://github.com/onetrueawk/awk/archive/refs/heads/master.tar.gz -Obwk.tar.gz
  tar xzvf bwk.tar.gz
  rm bwk.tar.gz

  echo
  echo "Compile BWK..."
  echo

  cd "awk-master"

  make

  mv a.out ../bwk

  cd ..
  ./bwk --version
  rm -r awk-master

@lib gawk
  install_gawk() {
    local version="$1"
    local exeName="$2"

    echo
    echo "Fetching Gawk-$version..."
    echo

    cd "soft"

    G=gawk-$version.tar.gz
    dlUrl="http://git.savannah.gnu.org/cgit/gawk.git/snapshot/$G"
    dlFolder="gawk-$version"
#    if [[ $version == '5.1.1' ]]
#    then
#      G='master.tar.gz'
#      dlUrl="https://github.com/gnu-mirror-unofficial/gawk/archive/refs/heads/$G"
#      dlFolder='gawk-master'
#      G="gawk-$version.tar.xz"
#      dlUrl="https://fossies.org/linux/misc/$G"
#      dlFolder="gawk-$version"
#      tarOpts="xvf"
#    fi
    wget "$dlUrl"
    tar "${tarOpts:-xzvf}" "$G"
    rm "$G"

    echo
    echo "Compile Gawk-$version..."
    echo

    cd "$dlFolder"

    ./configure
    make
    # make check

    mv gawk ../$exeName
    mkdir ../${exeName}_libs
    mv extension/.libs/*.so ../"${exeName}"_libs # for AWKLIBPATH

    cd ..
    ./$exeName --version
    rm -r "$dlFolder"
  }

@goal installed_gawk51 @private
@reached_if [[ -f soft/gawk51 ]]
@depends_on soft_folder_created
@use_lib gawk
  install_gawk 5.1.0 gawk51

@goal installed_gawk511 @private
@reached_if [[ -f soft/gawk511 ]]
@depends_on soft_folder_created
@use_lib gawk
  install_gawk 5.1.1 gawk511

@goal installed_mawk134 @private
@reached_if [[ -f soft/mawk134 ]]
@depends_on soft_folder_created
  echo
  echo "Fetching Mawk 1.3.4..."
  echo

  cd "soft"

  F=mawk.tar.gz
  wget "https://invisible-island.net/datafiles/release/$F"
  tar xzvf "$F"
  rm "$F"

  echo
  echo "Compile Mawk 1.3.4..."
  echo

  cd mawk-1.3.4-*

  ./configure && make

  mv mawk ../mawk134

  cd ..
  ./mawk134 -W version
  rm -r mawk-1.3.4-*

@goal installed_goawk @private
@reached_if [[ -f soft/$GOAWK ]]
@depends_on soft_folder_created
  echo
  echo "Fetching GoAWK $GOAWK_VERSION ..."
  echo

  cd "soft"

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    os="linux"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    os="darwin"
  else
    >&2 echo "Unknown OS"
    exit 1
  fi

  F=goawk_v${GOAWK_VERSION}_${os}_amd64.tar.gz
  wget "https://github.com/benhoyt/goawk/releases/download/v$GOAWK_VERSION/$F"
  tar xzvf "$F" goawk
  rm "$F"

  mv goawk $GOAWK
  "./$GOAWK" --version

@define GOAWK_BRANCH='bytecode'
@define GOAWK_BRANCH_EXE="goawk_$GOAWK_BRANCH"

@goal installed_goawk_branch @private
@reached_if [[ -f soft/$GOAWK_BRANCH_EXE ]]
@depends_on soft_folder_created
  echo
  echo "Installing GoAWK branch=$GOAWK_BRANCH ..."
  echo

  cd "soft"

  zip="https://github.com/benhoyt/goawk/archive/refs/heads/$GOAWK_BRANCH.zip"
  curl -L "$zip" -o "$GOAWK_BRANCH.zip"
  unzip -o "$GOAWK_BRANCH.zip"
  cd "goawk-$GOAWK_BRANCH"
  ~/soft/go1.17/bin/go build # TODO go path
  mv goawk ../"$GOAWK_BRANCH_EXE"

  cd ..
  ./"$GOAWK_BRANCH_EXE" --version
  rm -r "goawk-$GOAWK_BRANCH" "$GOAWK_BRANCH.zip"


@goal JSONTestSuite_installed @private
@depends_on soft_folder_created
@reached_if [[ -d "soft/JSONTestSuite" ]]
  echo
  echo "Fetching JSONTestSuite..."
  echo

  cd "soft"

  wget $JSONTestSuite_REPO/archive/master.tar.gz -O- \
    | tar xzvf - JSONTestSuite-master/test_parsing JSONTestSuite-master/test_transform
  mv JSONTestSuite-master JSONTestSuite

@goal test_suite
@doc runs JSON Test Suite
@depends_on JSONTestSuite_installed
  ./run_json_test_suit.awk